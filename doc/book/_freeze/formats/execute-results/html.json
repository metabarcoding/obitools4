{
  "hash": "e80972301bc122bdde66c980a1b1cea3",
  "result": {
    "markdown": "# File formats usable with *OBITools*\n\n*OBITools* manipulate have to manipulate DNA sequence data and taxonomical data. They can use some supplentary metadata describing the experiment and produce some stats about the processed DNA data. All the manipulated data are stored in text files, following standard data format.\n\n## The DNA sequence data\n\nSequences can be stored following various format. *OBITools* knows some of them. The central formats for sequence files manipulated by *OBITools* scripts are the [*FASTA*](#sec-fasta) and [*FASTQ*](#sec-fastq) format. *OBITools* extends the both these formats by specifying a syntax to include in the definition line data qualifying the sequence. All file formats use the [`IUPAC`](#sec-iupac) code for encoding nucleotides.\n\nMoreover these two formats that can be used as input and output formats, *OBITools4* can read the following format :\n\n-   [EBML flat file](https://ena-docs.readthedocs.io/en/latest/submit/fileprep/flat-file-example.html) format (use by ENA)\n-   [Genbank flat file format](https://www.ncbi.nlm.nih.gov/Sitemap/samplerecord.html)\n-   [ecoPCR output files](https://pythonhosted.org/OBITools/scripts/ecoPCR.html)\n\n### The IUPAC Code {#sec-iupac}\n\nThe International Union of Pure and Applied Chemistry ([IUPAC]()) defined the standard code for representing protein or DNA sequences.\n\n| **Code** | **Nucleotide**              |\n|----------|-----------------------------|\n| A        | Adenine                     |\n| C        | Cytosine                    |\n| G        | Guanine                     |\n| T        | Thymine                     |\n| U        | Uracil                      |\n| R        | Purine (A or G)             |\n| Y        | Pyrimidine (C, T, or U)     |\n| M        | C or A                      |\n| K        | T, U, or G                  |\n| W        | T, U, or A                  |\n| S        | C or G                      |\n| B        | C, T, U, or G (not A)       |\n| D        | A, T, U, or G (not C)       |\n| H        | A, T, U, or C (not G)       |\n| V        | A, C, or G (not T, not U)   |\n| N        | Any base (A, C, G, T, or U) |\n\n### The *FASTA* sequence format {#sec-fasta}\n\nThe [*FASTA*](#sec-fasta) format is certainly the most widely used sequence file format. This is certainly due to its great simplicity. It was originally created for the Lipman and Pearson [`FASTA` program](http://www.ncbi.nlm.nih.gov/pubmed/3162770?dopt=Citation). *OBITools* use in more of the classical [*FASTA*](#sec-fasta) format an `extended version` of this format where structured data are included in the title line.\n\nIn [*FASTA*](#sec-fasta) format a sequence is represented by a title line beginning with a **`>`** character and the sequences by itself following the [`IUPAC`](#sec-iupac) code. The sequence is usually split other severals lines of the same length (expect for the last one)\n\n```         \n>my_sequence this is my pretty sequence\nACGTTGCAGTACGTTGCAGTACGTTGCAGTACGTTGCAGTACGTTGCAGTACGTTGCAGT\nGTGCTGACGTTGCAGTACGTTGCAGTACGTTGCAGTACGTTGCAGTACGTTGCAGTGTTT\nAACGACGTTGCAGTACGTTGCAGT\n```\n\nThis is no special format for the title line excepting that this line should be unique. Usually the first word following the **\\>** character is considered as the sequence identifier. The end of the title line corresponding to a description of the sequence. Several sequences can be concatenated in a same file. The description of the next sequence is just pasted at the end of the record of the previous one\n\n```         \n>sequence_A this is my first pretty sequence\nACGTTGCAGTACGTTGCAGTACGTTGCAGTACGTTGCAGTACGTTGCAGTACGTTGCAGT\nGTGCTGACGTTGCAGTACGTTGCAGTACGTTGCAGTACGTTGCAGTACGTTGCAGTGTTT\nAACGACGTTGCAGTACGTTGCAGT\n>sequence_B this is my second pretty sequence\nACGTTGCAGTACGTTGCAGTACGTTGCAGTACGTTGCAGTACGTTGCAGTACGTTGCAGT\nGTGCTGACGTTGCAGTACGTTGCAGTACGTTGCAGTACGTTGCAGTACGTTGCAGTGTTT\nAACGACGTTGCAGTACGTTGCAGT\n>sequence_C this is my third pretty sequence\nACGTTGCAGTACGTTGCAGTACGTTGCAGTACGTTGCAGTACGTTGCAGTACGTTGCAGT\nGTGCTGACGTTGCAGTACGTTGCAGTACGTTGCAGTACGTTGCAGTACGTTGCAGTGTTT\nAACGACGTTGCAGTACGTTGCAGT\n```\n\n#### File extensions\n\nThere is no standard file extension for a [*FASTA*](#sec-fasta) file, but `.fa` and `.fasta`, are commonly used.\n\n### The *FASTQ* sequence format[^formats-1] {#sec-fastq}\n\n[^formats-1]: This article uses material from the Wikipedia article [`FASTQ format`](http://en.wikipedia.org/wiki/FASTQ_format) which is released under the `Creative Commons Attribution-Share-Alike License 3.0`\n\nThe [*FASTQ*](#sec-fastq) format is a text file format for storing both biological sequences (only nucleic acid sequences) and the associated sequence quality scores. Every nucleotide of the sequence and its associated quality score are each encoded by a single ASCII character. This format was originally developed by the Wellcome Trust Sanger Institute to link a [*FASTA*](#sec-fasta) sequence file to the corresponding quality data, but is now became the *de facto* standard for storing results from high-throughput sequencers [@cock2010sanger].\n\n*OBITools* considers that a [*FASTQ*](#sec-fastq) file uses four lines to encode a sequence record.\n\n-   Line 1 begins with a '\\@' character and is followed by a sequence identifier and an *optional* description \n    (like a [*FASTA*](#sec-fasta) title line).\n-   Line 2 is the sequence letters, in upper or lower case, but *OBITools* only write sequences as lower cases.\n-   Line 3 begins with a '+' character and is *optionally* followed by the same sequence identifier \n    (and any description) again.\n-   Line 4 encodes the quality values for the sequence in Line 2, and must contain the same number of \n    symbols as letters in the sequence.\n\nA [*FASTQ*](#sec-fastq) file looks like this:\n\n```         \n@SEQ_ID\nGATTTGGGGTTCAAAGCAGTATCGATCAAATAGTAAATCCATTTGTTCAACTCACAGTTT\n+\n!''*((((***+))%%%++)(%%%%).1***-+*''))**55CCF>>>>>>CCCCCCC65\n```\n\nThe character '!' represents the lowest quality while '\\~' is the highest. Here are the quality value characters in left-to-right increasing order of quality (`ASCII`):\n\n```         \n!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]\n^_`abcdefghijklmnopqrstuvwxyz{|}~\n```\n\nIf the original Sanger [*FASTQ*](#sec-fastq) files also allowed the sequence and quality strings to be wrapped (split over multiple lines), it is not supported by *OBITools* as it make parsing complicated due to the unfortunate choice of \"\\@\" and \"+\" as markers (these characters can also occur in the quality string).\n\n#### Sequence quality scores {.unnumbered}\n\nThe Phred quality value *Q* is an integer mapping of *p* (*i.e.*, the probability that the corresponding base call is incorrect). Two different equations have been in use. The first is the standard Sanger variant to assess reliability of a base call, otherwise known as Phred quality score:\n\n$$\nQ_\\text{sanger} = -10 \\, \\log_{10} p\n$$\n\nThe Solexa pipeline (i.e., the software delivered with the Illumina Genome Analyzer) earlier used a different mapping, encoding the odds $\\mathbf{p}/(1-\\mathbf{p})$ instead of the probability $\\mathbf{p}$:\n\n$$\nQ_\\text{solexa-prior to v.1.3} = -10 \\; \\log_{10} \\frac{p}{1-p}\n$$\n\nAlthough both mappings are asymptotically identical at higher quality values, they differ at lower quality levels (i.e., approximately $\\mathbf{p} > 0.05$, or equivalently, $\\mathbf{Q} < 13$).\n\n![Relationship between *Q* and *p* using the Sanger (red) and Solexa (black) equations (described above). The vertical dotted line indicates $\\mathbf{p}= 0.05$, or equivalently, $Q = 13$.](Probabilitymetrics.png){#fig-Probabilitymetrics}\n\n##### Encoding {.unnumbered}\n\nThe [*FASTQ*](#sec-fastq) format had differente way of encoding the Phred quality score along the time. Here a breif history of these changes is presented. *OBITools*\n\n-   Sanger format can encode a Phred quality score from 0 to 93 using ASCII 33 to 126 (although in raw read data the Phred quality score rarely exceeds 60, higher scores are possible in assemblies or read maps).\n-   Solexa/Illumina 1.0 format can encode a Solexa/Illumina quality score from -5 to 62 using ASCII 59 to 126 (although in raw read data Solexa scores from -5 to 40 only are expected)\n-   Starting with Illumina 1.3 and before Illumina 1.8, the format encoded a Phred quality score from 0 to 62 using ASCII 64 to 126 (although in raw read data Phred scores from 0 to 40 only are expected).\n-   Starting in Illumina 1.5 and before Illumina 1.8, the Phred scores 0 to 2 have a slightly different meaning. The values 0 and 1 are no longer used and the value 2, encoded by ASCII 66 \"B\".\n\n> Sequencing Control Software, Version 2.6, (Catalog \\# SY-960-2601, Part \\# 15009921 Rev. A, November 2009, page 30) states the following: *If a read ends with a segment of mostly low quality (Q15 or below), then all of the quality values in the segment are replaced with a value of 2 (encoded as the letter B in Illumina's text-based encoding of quality scores)... This Q2 indicator does not predict a specific error rate, but rather indicates that a specific final portion of the read should not be used in further analyses.* Also, the quality score encoded as \"B\" letter may occur internally within reads at least as late as pipeline version 1.6, as shown in the following example:\n\n```         \n@HWI-EAS209_0006_FC706VJ:5:58:5894:21141#ATCACG/1\nTTAATTGGTAAATAAATCTCCTAATAGCTTAGATNTTACCTTNNNNNNNNNNTAGTTTCTTGAGA\nTTTGTTGGGGGAGACATTTTTGTGATTGCCTTGAT\n+HWI-EAS209_0006_FC706VJ:5:58:5894:21141#ATCACG/1\nefcfffffcfeefffcffffffddf`feed]`]_Ba_^__[YBBBBBBBBBBRTT\\]][ dddd`\nddd^dddadd^BBBBBBBBBBBBBBBBBBBBBBBB\n```\n\nAn alternative interpretation of this ASCII encoding has been proposed. Also, in Illumina runs using PhiX controls, the character 'B' was observed to represent an \"unknown quality score\". The error rate of 'B' reads was roughly 3 phred scores lower the mean observed score of a given run.\n\n-   Starting in Illumina 1.8, the quality scores have basically returned to the use of the Sanger format (Phred+33).\n\n*OBITools* follows the Sanger format. Nevertheless, It is possible to read files encoded following the Solexa/Illumina format by applying a shift of 62 (see the option **--solexa** of the *OBITools* commands).\n\n#### File extensions\n\nThere is no standard file extension for a [*FASTQ*](#sec-fastq) file, but `.fq` and `.fastq`, are commonly used.\n\n## The taxonomy files\n\nMany OBITools are able to take into account taxonomic data. This is done by specifying \na directory containing all :doc:`NCBI taxonomy dump files <./taxdump>`.\n\n\n## The sample description file\n\nA key file for *OBITools4* is the file describing all samples (PCR) analyzed in the processed sequencing library file.\nThis file, often called the `ngsfilter` file, is a tab separated values (TSV) file. The format of this file is exactly \nidentical to that used in *OBITools2* and *OBITools4*.\n\n\n```{tsv, .smaller}\nwolf_diet    13a_F730603      aattaac  TTAGATACCCCACTATGC    TAGAACAGGCTCCTCTAG     F\nwolf_diet    15a_F730814      gaagtag  TTAGATACCCCACTATGC    TAGAACAGGCTCCTCTAG     F\nwolf_diet    26a_F040644      gaatatc  TTAGATACCCCACTATGC    TAGAACAGGCTCCTCTAG     F\nwolf_diet    29a_F260619      gcctcct  TTAGATACCCCACTATGC    TAGAACAGGCTCCTCTAG     F\n```\n\n\nAt least six columns must be present in every line of the file.\n\n-   The first column contains the name of the experience:\n\n    An experiment name groups a set of sample together. Sequences belonging to the experiment are\n    tagged with an attribute `experiment` containing the name of the experiment in their annotation.\n\n-   The second column contains the sample identifier in the experiment\n\n    The sample identifier must be unique in the experiment. The `obimultiplex` and `obitagpcr` commands add \n    to all the sequences bellonging to the same sample an attribute `sample` containing the sample identifier\n    \n-   The third column contains description of the tag used to identify sequences corresponding to this sample\n\n-   The fourth column contains the forward primer sequence\n-   The fifth column contains the reverse primer sequence\n-   The sixth column must always contain the character `F` (full length)\n\n",
    "supporting": [
      "formats_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}